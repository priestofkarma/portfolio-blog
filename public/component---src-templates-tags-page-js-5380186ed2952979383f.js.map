{"version":3,"sources":["webpack://portfolio-blog/./src/utils/randomColor.js","webpack://portfolio-blog/./src/components/PostListItem.js","webpack://portfolio-blog/./src/components/SectionCaption.js","webpack://portfolio-blog/./src/components/PostList.js","webpack://portfolio-blog/./src/templates/tags-page.js"],"names":["colors","getRndColor","this","Math","floor","random","length","nodeObj","postType","cardGradient","frontmatter","title","description","path","tags","featuredImage","featuredImageAlt","image","getImage","Link","to","className","map","tag","i","rndColors","key","G","loading","alt","quality","linkTo","linkText","stroke","fill","strokeWidth","viewBox","focusable","height","width","xmlns","fillRule","d","clipRule","query","tagNameFilter","edges","index","node","filter","PostListItem","declOfNum","number","titles","pageContext","data","pageData","pageTitle","pageDescription","projects","totalCount","notes"],"mappings":"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","file":"component---src-templates-tags-page-js-5380186ed2952979383f.js","sourcesContent":["// const rndColors = {\n//   colors: [\"azure-light\", \"indigo-light\", \"pink-light\", \"green-light\"],\n//   tags: [\"Layout\", \"Wordpress\", \"Jekyll\", \"Bootstrap\"],\n//   getRndColor: function (tagName) {\n//     let clr;\n//     this.tags.map((tag, index) => {\n//       if (tag == tagName) {\n//         clr = this.colors[index]\n//       }\n//     })\n//     return clr\n//   }\n// }\n\n\nconst rndColors = {\n  colors: [\"azure-light\", \"indigo-light\", \"pink-light\", \"green-light\"],\n  getRndColor: function () {\n    return this.colors[Math.floor(Math.random() * this.colors.length)]\n  }\n}\n\nexport default rndColors","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport rndColors from \"../utils/randomColor\"\n\nconst ProjectsListItem = ({ nodeObj, postType, cardGradient }) => {\n\n  // destructuring nodeObj\n  const {\n    frontmatter: { title, description, path, tags, featuredImage, featuredImageAlt },\n  } = nodeObj\n\n  const image = getImage(featuredImage)\n\n  return (\n    <li>\n      <Link to={path} title={description} className={`list-item ${cardGradient ? `card-gradient-${cardGradient}` : \"\"}`}>\n        {tags && (<div className=\"tag-list\">\n          {tags.map((tag, i) => (\n            <span className={`tag-list_item ${rndColors.getRndColor(tag)}`} key={`${postType}-tag${i}`}>{tag}</span>\n          ))}\n        </div>)}\n\n        {featuredImage && <GatsbyImage\n          loading=\"lazy\"\n          className=\"list-item_image\"\n          image={image}\n          alt={featuredImageAlt}\n          quality=\"100\"\n        />}\n\n        <div className=\"list-item_info\">\n          <h3 className=\"h4 list-item_title\">{title}</h3>\n          <p className=\"list-item_text\">{description}</p>\n        </div>\n      </Link>\n    </li>\n\n  )\n}\n\nexport default ProjectsListItem","import React from 'react'\nimport {Link} from 'gatsby'\n\nconst SectionCaption = ({title, linkTo, linkText}) => {\n  return (\n    (\n      <div className=\"section-caption\">\n        <h2>{title}</h2>\n        <Link to={linkTo}>\n          {linkText}\n          <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M10.146 4.646a.5.5 0 01.708 0l3 3a.5.5 0 010 .708l-3 3a.5.5 0 01-.708-.708L12.793 8l-2.647-2.646a.5.5 0 010-.708z\" clipRule=\"evenodd\"></path><path fillRule=\"evenodd\" d=\"M2 8a.5.5 0 01.5-.5H13a.5.5 0 010 1H2.5A.5.5 0 012 8z\" clipRule=\"evenodd\"></path></svg>\n        </Link>\n      </div>\n    )\n  )\n}\n\nexport default SectionCaption","import React from 'react'\nimport PostListItem from './PostListItem'\nimport SectionCaption from '../components/SectionCaption'\n\nconst PostList = ({ title, query, postType, tagNameFilter, linkText }) => {\n\n  return (\n    <div className={`${postType}-list-container posts-list-container`}>\n      {title && <SectionCaption title={title} linkTo={`/${postType}`} linkText={linkText} />}\n      <ul className=\"list\">\n        {query.edges.map(function ({ node }, index) {\n          const tags = node.frontmatter.tags\n\n          if (tagNameFilter) {\n            return tags.filter(tag => tag === tagNameFilter)\n              .map(() => <PostListItem nodeObj={node} postType={postType} cardGradient={index + 1} key={`${postType}ListItem${index}`} />)\n          } else {\n            return <PostListItem nodeObj={node} postType={postType} cardGradient={index + 1} key={`${postType}ListItem${index}`} />\n          }\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default PostList\n","import React from \"react\"\nimport Layout from '../components/Layout'\nimport { graphql } from \"gatsby\"\nimport AllTagList from '../components/AllTagList'\nimport PostList from '../components/PostList'\nimport Seo from '../components/Seo'\n\nfunction declOfNum(number, titles) {\n  let cases = [2, 0, 1, 1, 1, 2];\n  return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];\n}\n\nconst ProjectTags = ({ pageContext, data }) => {\n\n  const { tag } = pageContext\n\n  const pageData = {\n    title: `Тег - ${tag}`,\n    description: `Записи с тегом - ${tag}`,\n  }\n\n  return (\n    <Layout>\n      <Seo pageTitle={pageData.title} pageDescription={pageData.description} />\n      <AllTagList />\n      <div className=\"tags\">\n        <div className=\"wrapper\">\n\n          {data.projects.totalCount !== 0 && (\n            <PostList\n              title={`${data.projects.totalCount} ${declOfNum(data.projects.totalCount, ['проект', 'проекта', 'проектов'])} с тегом \"${tag}\"`}\n              postType=\"projects\"\n              query={data.projects}\n              linkText=\"Все проекты\"\n            />\n          )}\n          {data.notes.totalCount !== 0 && (\n            <PostList\n              title={`${data.notes.totalCount} ${declOfNum(data.notes.totalCount, ['заметка', 'заметки', 'заметок'])} с тегом \"${tag}\"`}\n              postType=\"notes\"\n              query={data.notes}\n              linkText=\"Все заметки\"\n            />\n          )}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default ProjectTags\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    tags: allMdx {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    projects: allMdx(\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: {fileAbsolutePath: {regex: \"/content/projects/\"}, frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          slug\n          frontmatter {\n            description\n            title\n            tags\n            path\n            featuredImageAlt\n            featuredImage {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n    notes: allMdx(\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: {fileAbsolutePath: {regex: \"/content/notes/\"}, frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            tags\n            path\n          }\n        }\n      }\n    }\n    allPages: allMdx(\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: { frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n    }\n  }`\n"],"sourceRoot":""}