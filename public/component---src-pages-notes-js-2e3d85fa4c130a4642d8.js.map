{"version":3,"sources":["webpack://portfolio-blog/./src/components/PageIntro.js","webpack://portfolio-blog/./src/utils/randomColor.js","webpack://portfolio-blog/./src/components/PostListItem.js","webpack://portfolio-blog/./src/components/SectionCaption.js","webpack://portfolio-blog/./src/components/PostList.js","webpack://portfolio-blog/./src/components/TagList.js","webpack://portfolio-blog/./src/pages/notes.js"],"names":["text","pageTitle","children","className","colors","getRndColor","this","Math","floor","random","length","nodeObj","postType","cardGradient","frontmatter","title","description","path","tags","featuredImage","featuredImageAlt","image","getImage","Link","to","map","tag","i","rndColors","key","G","loading","alt","quality","linkTo","linkText","stroke","fill","strokeWidth","viewBox","focusable","height","width","xmlns","fillRule","d","clipRule","query","tagNameFilter","edges","index","node","filter","PostListItem","onTagChange","useState","activeTag","setActiveTag","onClickTag","e","target","tagName","getAttribute","FilterButton","tagValue","fieldValue","tagvalue","onClick","onKeyDown","totalCount","posts","useStaticQuery","setTagName","allMdx","group","pageData","clazzName","pageDescription"],"mappings":"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","file":"component---src-pages-notes-js-2e3d85fa4c130a4642d8.js","sourcesContent":["import React from 'react'\n\n\nconst ProjectIntro = ({text, pageTitle, children}) => {\n\n    return (\n        // <section className={`page-intro ${bgColor}`}>\n        <section className=\"page-intro\">\n            <div className=\"wrapper\">\n                <h1 className=\"page-intro_title\">{pageTitle}</h1>\n                {text && (\n                    <p className=\"page-intro_text h4\">{text}</p>\n                )}\n                {children}\n            </div>\n        </section>\n    )\n}\n\nexport default ProjectIntro","// const rndColors = {\n//   colors: [\"azure-light\", \"indigo-light\", \"pink-light\", \"green-light\"],\n//   tags: [\"Layout\", \"Wordpress\", \"Jekyll\", \"Bootstrap\"],\n//   getRndColor: function (tagName) {\n//     let clr;\n//     this.tags.map((tag, index) => {\n//       if (tag == tagName) {\n//         clr = this.colors[index]\n//       }\n//     })\n//     return clr\n//   }\n// }\n\n\nconst rndColors = {\n  colors: [\"azure-light\", \"indigo-light\", \"pink-light\", \"green-light\"],\n  getRndColor: function () {\n    return this.colors[Math.floor(Math.random() * this.colors.length)]\n  }\n}\n\nexport default rndColors","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport rndColors from \"../utils/randomColor\"\n\nconst ProjectsListItem = ({ nodeObj, postType, cardGradient }) => {\n\n  // destructuring nodeObj\n  const {\n    frontmatter: { title, description, path, tags, featuredImage, featuredImageAlt },\n  } = nodeObj\n\n  const image = getImage(featuredImage)\n\n  return (\n    <li>\n      <Link to={path} title={description} className={`list-item ${cardGradient ? `card-gradient-${cardGradient}` : \"\"}`}>\n        {tags && (<div className=\"tag-list\">\n          {tags.map((tag, i) => (\n            <span className={`tag-list_item ${rndColors.getRndColor(tag)}`} key={`${postType}-tag${i}`}>{tag}</span>\n          ))}\n        </div>)}\n\n        {featuredImage && <GatsbyImage\n          loading=\"lazy\"\n          className=\"list-item_image\"\n          image={image}\n          alt={featuredImageAlt}\n          quality=\"100\"\n        />}\n\n        <div className=\"list-item_info\">\n          <h3 className=\"h4 list-item_title\">{title}</h3>\n          <p className=\"list-item_text\">{description}</p>\n        </div>\n      </Link>\n    </li>\n\n  )\n}\n\nexport default ProjectsListItem","import React from 'react'\nimport {Link} from 'gatsby'\n\nconst SectionCaption = ({title, linkTo, linkText}) => {\n  return (\n    (\n      <div className=\"section-caption\">\n        <h2>{title}</h2>\n        <Link to={linkTo}>\n          {linkText}\n          <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M10.146 4.646a.5.5 0 01.708 0l3 3a.5.5 0 010 .708l-3 3a.5.5 0 01-.708-.708L12.793 8l-2.647-2.646a.5.5 0 010-.708z\" clipRule=\"evenodd\"></path><path fillRule=\"evenodd\" d=\"M2 8a.5.5 0 01.5-.5H13a.5.5 0 010 1H2.5A.5.5 0 012 8z\" clipRule=\"evenodd\"></path></svg>\n        </Link>\n      </div>\n    )\n  )\n}\n\nexport default SectionCaption","import React from 'react'\nimport PostListItem from './PostListItem'\nimport SectionCaption from '../components/SectionCaption'\n\nconst PostList = ({ title, query, postType, tagNameFilter, linkText }) => {\n\n  return (\n    <div className={`${postType}-list-container posts-list-container`}>\n      {title && <SectionCaption title={title} linkTo={`/${postType}`} linkText={linkText} />}\n      <ul className=\"list\">\n        {query.edges.map(function ({ node }, index) {\n          const tags = node.frontmatter.tags\n\n          if (tagNameFilter) {\n            return tags.filter(tag => tag === tagNameFilter)\n              .map(() => <PostListItem nodeObj={node} postType={postType} cardGradient={index + 1} key={`${postType}ListItem${index}`} />)\n          } else {\n            return <PostListItem nodeObj={node} postType={postType} cardGradient={index + 1} key={`${postType}ListItem${index}`} />\n          }\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default PostList\n","import React, { useState } from 'react'\n\nconst TagList = ({ query, onTagChange }) => {\n  const [activeTag, setActiveTag] = useState(null)\n\n\n  function onClickTag(e) {\n    let target = e.target;\n    if (target.tagName === 'BUTTON') {\n      onTagChange(e.target.getAttribute(\"tagvalue\"))\n      setActiveTag(activeTag => e.target.getAttribute(\"tagvalue\"))\n      if (target.getAttribute(\"tagvalue\") == null) {\n        onTagChange(null)\n        setActiveTag(activeTag => null)\n      }\n    }\n  }\n\n  function clearFilter() {\n    onTagChange(null)\n    setActiveTag(activeTag => null)\n  }\n\n  // buttons\n  const FilterButton = ({ tagValue }) => {\n    return (\n      <button\n        className={tagValue.fieldValue === activeTag ? \"active-tag\" : \"\"}\n        tagvalue={tagValue.fieldValue}\n        onClick={onClickTag}\n        onKeyDown={onClickTag}\n      >\n        {tagValue.fieldValue} <span><b>{tagValue.totalCount}</b></span>\n      </button>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"h4\">Фильтр по тегу:</div>\n      <div className=\"tag-list\">\n        <button\n          className={`unfilter ${activeTag === null ? \"active-tag\" : \"\"}`}\n          onClick={clearFilter}\n        >\n          All\n        </button>\n\n        {query.map(tag => {\n          return (\n            <FilterButton key={tag.fieldValue} tagValue={tag} />\n          )\n        })}\n      </div>\n    </>\n  )\n}\n\nexport default TagList","import React, { useState } from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Seo from '../components/Seo'\nimport PageIntro from '../components/PageIntro'\nimport PostList from '../components/PostList'\nimport TagList from '../components/TagList'\n\nconst postsQuery = graphql`\n query {\n    allMdx(filter: {fileAbsolutePath: {regex: \"/content/notes/\"}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          id\n          slug\n          frontmatter {\n            description\n            path\n            tags\n            title\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n\nconst BlogPage = () => {\n\n  const posts = useStaticQuery(postsQuery)\n\n  const [tagName, setTagName] = useState('')\n\n  function setTag(tag) {\n    setTagName(tagName => tag)\n  }\n\n  const tags = posts.allMdx.group\n\n  const pageData = {\n    title: \"Заметочки и закладочки\",\n    // title: \"Головные мюсли 🧠\",\n    description: \"Мои зметочки и кое-что еще 🙃\",\n    // description: \"О чем-то пишу, о чем-то не пишу 🤷‍♂️\",\n  }\n\n  return (\n    <Layout pageTitle=\"Заметочки\" clazzName=\"notes\">\n      <Seo pageTitle={pageData.title} pageDescription={pageData.description} />\n      <PageIntro\n        // bgColor=\"gradient-green\"\n        pageTitle={pageData.title}\n        text={pageData.description}\n      ></PageIntro>\n\n      <div className=\"blog-section\">\n        <div className=\"wrapper\">\n          <TagList query={tags} onTagChange={setTag}/>\n          <PostList postType=\"notes\" tagNameFilter={tagName} query={posts.allMdx} linkText=\"Все заметки\" />\n\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPage"],"sourceRoot":""}